2.2-1
θ(n^3)

2.2-2
伪代码见select_sort.py

循环不变式，没特别理解，不知道以下理解对不对?
初始化:i=0这个循环结束没进入第二个循环的时候seq[0]是排序好的，且seq[0]是最小的那个
保持:i=n的时候如果seq[:i+1]是排好序的，那么在剩下的seq[i:]中去最小的那个item放到seq[i+1]的位置，
那么i=n+1的时候seq[:i+2]也是已序的。
终止:到i=len(seq)-1时， 前面所有的元素是已序的，因为最后一个元素是最大的，所以整个数组是已序的

这个问题见最后终止的条件

最好情况下，每次选择最小项时都是第一个就是，那么get_minimun_index就是常数时间，
只要依次遍历数组就可以了，所以是θ(n)
最坏情况下get_minimun_index是θ(n)， 外面再套一个循环，就是θ(n^2)

2.2-3
假设要查找的元素在出现在每个位置的概率相等，查找n次，需要检查的次数依次为1-n, 则总查找次数为
sum=(n+1)*n/2, 平均查找次数为sum/n=(n+1)/2.最坏为每次都是最后一个,即n.都是θ(n)

2.2-4
直觉是这不可能把,任何一个算法修改一下就能有最好情况运行时间?
在仔细审一下题,好像意思是要在最好情况下有更快的运行时间.比如说我之前2.2-2里面的如果检测到最小的元素
就是当前要换的元素的话,就不要走交换那一步的计算了.